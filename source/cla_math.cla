//*****************************************************************************
// includes
//*****************************************************************************
#include "cla.h"
#include "CLAmath.h"
#include "F2837xS_Cla_typedefs.h"

#define	M_PI		3.14159265358979323846	/* pi */

const float RAD_TO_DEG = 57.295779513082320876798154814105; /* = 180/ pi */
const float DEG_TO_RAD = 0.01745329251994329576923690768489; /* = pi / 180 */

/*
 * local variables
 */

/*
 * functions
 */

//Task 1 : Datafusion Pose
__interrupt void Cla1Task1(void) {
	vec3f phi, w;

	__mdebugstop();

	/*
	 * Pull Data from Message Ram
	 */
	vec3f acc = cpu_to_cla.raw_acc;
	vec3f gyro = cpu_to_cla.raw_gyro;
	vec3f phi_old = cpu_to_cla.phi;
	vec3f w_old = cpu_to_cla.w;

	phi.x = CLAatan2((acc.y - bias_acc.y), (acc.z - bias_acc.z));
	phi.y = CLAatan2((acc.x - bias_acc.x),
			CLAsqrt(
					(acc.y - bias_acc.y) * (acc.y - bias_acc.y)
							+ (acc.z - bias_acc.z) * (acc.z - bias_acc.z)));

	// Radians to degree

	phi.x *= RAD_TO_DEG;
	phi.y *= RAD_TO_DEG;

	// Subtract bias
	//TODO: name this coordinate system
	w.x = (gyro.x - bias_gyro.x);
	w.y = -(gyro.y - bias_gyro.y);
	w.z = -(gyro.z - bias_gyro.z);
	__mdebugstop();

	// degree to Radians

	float phi_rad = phi_old.x * DEG_TO_RAD;
	float theta_rad = phi_old.y * DEG_TO_RAD;

	//float sinphi = CLAsin(phi_rad);
	//float cosphi = CLAcos(phi_rad);

	float sinphi, cosphi;
	CLAsincos(phi_rad, &sinphi, &cosphi);
	float tanphi = CLAdiv(sinphi, cosphi);

//	float sintheta = CLAsin(theta_rad);
//	float costheta = CLAcos(theta_rad);

	float sintheta, costheta;
	CLAsincos(theta_rad, &sintheta, &costheta);
	float tantheta = CLAdiv(sintheta, costheta);

	// Complementary filter for Euler angles, see e.g. http://www.pieter-jan.com/node/11
	phi.x = 0.995
			* (phi_old.x
					+ 0.0013157
							* (w.x + sinphi * tantheta * w.y
									+ cosphi * tantheta * w.z)
					+ (w.x - w_old.x) * CLAdiv(0.0013157, 2)) + 0.005 * phi.x;
	phi.y = 0.995
			* (phi_old.y + 0.0013157 * (cosphi * w.y - sinphi * w.z)
					+ (w.y - w_old.y) * CLAdiv(0.0013157, 2)) + 0.005 * phi.y;
	phi.z = phi_old.z
			+ CLAdiv(0.0013157 * (sinphi * w.y + cosphi * w.z), costheta);
	__mdebugstop();

	/*
	 * Push results to Message RAM.
	 */
	cla_to_cpu.phi = phi;
	cla_to_cpu.w = w;

}

__interrupt void Cla1Task2(void) {
	// Control algorithm.
}

__interrupt void Cla1Task3(void) {

}

__interrupt void Cla1Task4(void) {

}

__interrupt void Cla1Task5(void) {
	// Datafusion POSITION
}

__interrupt void Cla1Task6(void) {

}

__interrupt void Cla1Task7(void) {

}

__interrupt void Cla1Task8(void) {

}
// End of file
