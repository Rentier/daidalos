var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var GateSwi = xdc.useModule('ti.sysbios.gates.GateSwi');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Event = xdc.useModule('ti.sysbios.knl.Event');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x800;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/*
 * Setup the SYSCLK to 200 MHz
 */
Boot.OSCCLK = 10;
BIOS.cpuFreq.lo = 200000000;
Boot.SYSCLKDIVSEL = 0;
Boot.SPLLIMULT = 20;
Boot.SPLLFMULT = Boot.Fract_0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x500;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x500;

System.SupportProxy = SysMin;

Boot.bootFromFlash = false;
Boot.disableWatchdog = true;

System.abortFxn = System.abortSpin;

/*
 * Logging
 */
 
var LoggerSys = xdc.useModule("xdc.runtime.LoggerSys");
 
Defaults.common$.logger = LoggerSys.create();

System.extendedFormats = '%$L%$S%$F%f';

/*
 * Clocks
 */
 
 // TODO: For debug purposes, we multiplied every period by
 // 1000, as else it would be too fast to read system_printf.
 // When running live, these periods therefore have to be
 // changed to the real values.

Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickPeriod = 500; 

var clock_heartbeat_params = new Clock.Params();
clock_heartbeat_params.instance.name = "clock_heartbeat";
clock_heartbeat_params.period = 1000000; // 1000 ticks
Program.global.clock_heartbeat = Clock.create("&clock_heartbeat_func", 1, clock_heartbeat_params);

var clock_mainloop_params = new Clock.Params();
clock_mainloop_params.instance.name = "clock_mainloop";
clock_mainloop_params.period = 2000; // 2 ticks
Program.global.clock_mainloop = Clock.create("&clock_mainloop_func", 1, clock_mainloop_params);

var clock_ultrasonic_params = new Clock.Params();
clock_ultrasonic_params.instance.name = "clock_ultrasonic";
clock_ultrasonic_params.period = 50000; // 50 ticks
Program.global.clock_ultrasonic = Clock.create("&clock_ultrasonic_func", 1, clock_ultrasonic_params);

/*
 * Hardwareinterrupts - Hwis
 */
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi_Spia_Rx";
Program.global.hwi_Spia_Rx = Hwi.create(72, "&imu_spia_rx_isr", hwi0Params);

var hwi_cla_df_pose_params = new Hwi.Params();
hwi_cla_df_pose_params.instance.name = "hwi_cla_df_pose";
Program.global.hwi_cla_df_pose = Hwi.create(112, "&cla1Isr1", hwi_cla_df_pose_params);

var hwi_cla_df_position_params = new Hwi.Params();
hwi_cla_df_position_params.instance.name = "hwi_cla_df_position";
Program.global.hwi_cla_df_position = Hwi.create(116, "&cla1Isr5", hwi_cla_df_position_params);

var hwi_cla_control_params = new Hwi.Params();
hwi_cla_control_params.instance.name = "hwi_cla_control";
Program.global.hwi_cla_control = Hwi.create(113, "&cla1Isr2", hwi_cla_control_params);

/*
 * Softwareinterrupts - Swis
 */
var swi_update_state_params = new Swi.Params();
swi_update_state_params.instance.name = "swi_update_state";
swi_update_state_params.priority = 5;
Program.global.swi_update_state = Swi.create("&swi_update_state_func", swi_update_state_params);

/*
 * Tasks
 */
 Task.defaultStackSize = 256;
 
 var task_cla_params = new Task.Params();
task_cla_params.instance.name = "task_cla";
task_cla_params.priority = 10;
Program.global.task_cla = Task.create("&task_cla_func", task_cla_params);

var task_control_params = new Task.Params();
task_control_params.instance.name = "task_control";
task_control_params.priority = 10;
Program.global.task_control = Task.create("&task_control_func", task_control_params);

var task_flush_params = new Task.Params();
task_flush_params.instance.name = "task_flush";
Program.global.task_flush = Task.create("&task_flush_func", task_flush_params);

var task_led_params = new Task.Params();
task_led_params.instance.name = "task_led";
Program.global.task_led = Task.create("&task_led_func", task_led_params);

var task_imu_params = new Task.Params();
task_imu_params.instance.name = "task_imu";
task_imu_params.priority = 10;
Program.global.task_imu = Task.create("&task_imu_func", task_imu_params);

var task_init_system_params = new Task.Params();
task_init_system_params.instance.name = "task_init_system";
task_init_system_params.priority = 10;
Program.global.task_init_system = Task.create("&task_init_system_func", task_init_system_params);

var task_motor_params = new Task.Params();
task_motor_params.instance.name = "task_motor";
task_motor_params.priority = 10;
Program.global.task_motor = Task.create("&task_motor_func", task_motor_params);

var task_receive_msg_params = new Task.Params();
task_receive_msg_params.instance.name = "task_receive_msg";
task_receive_msg_params.priority = 4;
Program.global.task_receive_msg = Task.create("&task_receive_msg_func", task_receive_msg_params);

var task_remote_params = new Task.Params();
task_remote_params.instance.name = "task_remote";
task_remote_params.priority = 4;
Program.global.task_remote = Task.create("&task_remote_func", task_remote_params);

var task_transmit_msg_params = new Task.Params();
task_transmit_msg_params.instance.name = "task_transmit_msg";
task_transmit_msg_params.priority = 4;
Program.global.task_transmit_msg = Task.create("&task_transmit_msg_func", task_transmit_msg_params);

var task_ultrasonic_params = new Task.Params();
task_ultrasonic_params.instance.name = "task_ultrasonic";
task_ultrasonic_params.priority = 4;
Program.global.task_ultrasonic = Task.create("&task_ultrasonic_func", task_ultrasonic_params);

/*
 * Semaphores
 */
var semaphore_control_params = new Semaphore.Params();
semaphore_control_params.instance.name = "semaphore_control";
semaphore_control_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_control = Semaphore.create(0, semaphore_control_params);

var semaphore_control_cla_finished_params = new Semaphore.Params();
semaphore_control_cla_finished_params.instance.name = "semaphore_control_cla_finished";
semaphore_control_cla_finished_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_control_cla_finished = Semaphore.create(0, semaphore_control_cla_finished_params);

var semaphore_mainloop_params = new Semaphore.Params();
semaphore_mainloop_params.instance.name = "semaphore_mainloop";
semaphore_mainloop_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_mainloop = Semaphore.create(0, semaphore_mainloop_params);

var semaphore_motor_params = new Semaphore.Params();
semaphore_motor_params.instance.name = "semaphore_motor";
semaphore_motor_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_motor = Semaphore.create(0, semaphore_motor_params);

var semaphore_spia_done_params = new Semaphore.Params();
semaphore_spia_done_params.instance.name = "semaphore_spia_done";
semaphore_spia_done_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_spia_done = Semaphore.create(0, semaphore_spia_done_params);

var semaphore_receive_msg_params = new Semaphore.Params();
semaphore_receive_msg_params.instance.name = "semaphore_receive_msg";
semaphore_receive_msg_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_receive_msg = Semaphore.create(0, semaphore_receive_msg_params);

var semaphore_remote_params = new Semaphore.Params();
semaphore_remote_params.instance.name = "semaphore_remote";
semaphore_remote_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_remote = Semaphore.create(0, semaphore_remote_params);

var semaphore_transmit_msg_params = new Semaphore.Params();
semaphore_transmit_msg_params.instance.name = "semaphore_transmit_msg";
semaphore_transmit_msg_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_transmit_msg = Semaphore.create(0, semaphore_transmit_msg_params);

var semaphore_ultrasonic_params = new Semaphore.Params();
semaphore_ultrasonic_params.instance.name = "semaphore_ultrasonic";
semaphore_ultrasonic_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_ultrasonic = Semaphore.create(1, semaphore_ultrasonic_params);

/*
 * Gates
 */
var gate_swi_statevector_params = new GateSwi.Params();
gate_swi_statevector_params.instance.name = "gate_swi_statevector";
Program.global.gate_swi_statevector = GateSwi.create(gate_swi_statevector_params);

/*
 * Queues
 */
var queue_receive_msg_params = new Queue.Params();
queue_receive_msg_params.instance.name = "queue_receive_msg";
Program.global.queue_receive_msg = Queue.create(queue_receive_msg_params);

var queue_transmit_msg_params = new Queue.Params();
queue_transmit_msg_params.instance.name = "queue_transmit_msg";
Program.global.queue_transmit_msg = Queue.create(queue_transmit_msg_params);

/*
 * Events
 */
var event_init_system_params = new Event.Params();
event_init_system_params.instance.name = "event_init_system";
Program.global.event_init_system = Event.create(event_init_system_params);
