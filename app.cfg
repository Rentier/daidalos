var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

var Hwi = xdc.useModule('ti.sysbios.family.c28.Hwi');
var Boot = xdc.useModule('ti.catalog.c2800.initF2837x.Boot');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x800;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x500;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x100;

System.SupportProxy = SysMin;

Boot.bootFromFlash = false;
Boot.disableWatchdog = true;

System.abortFxn = System.abortSpin;

/*
 * Logging
 */
 
var LoggerSys = xdc.useModule("xdc.runtime.LoggerSys");
 
Defaults.common$.logger = LoggerSys.create();

/*
 * Clocks
 */

Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickPeriod = 500;

var clock_mainloop_params = new Clock.Params();
clock_mainloop_params.instance.name = "clock_mainloop";
clock_mainloop_params.period = 2000;
Program.global.clock_mainloop = Clock.create("&clock_mainloop_func", 1, clock_mainloop_params);

/*
 * Tasks
 */
var task_flush_params = new Task.Params();
task_flush_params.instance.name = "task_flush";
Program.global.task_flush = Task.create("&task_flush_func", task_flush_params);

var task_led_params = new Task.Params();
task_led_params.instance.name = "task_led";
Program.global.task_led = Task.create("&task_led_func", task_led_params);

var task_imu_params = new Task.Params();
task_imu_params.instance.name = "task_imu";
Program.global.task_imu = Task.create("&task_imu_func", task_imu_params);

/*
 * Semaphores
 */
var semaphore_mainloop_params = new Semaphore.Params();
semaphore_mainloop_params.instance.name = "semaphore_mainloop";
semaphore_mainloop_params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore_mainloop = Semaphore.create(0, semaphore_mainloop_params);
